##
# (C) Josh Netterfield 2015
# Part of the Satie music engraver <https://github.com/jnetterf/satie>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

.PHONY: build lint test tsd _gentestsuite _tsc _stageOnly _testOnly test_all _bundleOnly

all: build test


# ---- Headers for generated files ------------------------------------------------

define BRAVURA_HEADER
/**
 * Licensed under the SIL Open Font License (OFL)
 * Automatically generated by 'make bravura_metadata'
 */

let Bravura =
endef
export BRAVURA_HEADER

define GLYPHNAMES_HEADER
/**
 * Licensed under the SIL Open Font License (OFL)
 */

let names: {[key: string]: string} =
endef
export GLYPHNAMES_HEADER


# ---- Node dependencies and mxmljson helper --------------------------------------

./node_modules/tsd/build/cli.js:
	npm install


# ---- Standard target ------------------------------------------------------------

dist/*.js: build

build: _tsc _stageOnly _bundleOnly

NO_COLOR=\033[0m
OK_COLOR=\033[32;01m
ERROR_COLOR=\033[31;01m
WARN_COLOR=\033[33;01m
INFO_COLOR=\033[36;01m

OK_STRING=$(OK_COLOR)  ...ok!$(NO_COLOR)
TSC_STRING=$(INFO_COLOR)satie» Building from tsconfig.json...$(NO_COLOR)
BUNDLE_PROD_STRING=$(INFO_COLOR)satie» Bundling dist/satie-browser-prod.js...$(NO_COLOR)
WATCH_STRING=$(INFO_COLOR)satie» Watching from tsconfig.json...$(NO_COLOR)
STAGE_STRING=$(INFO_COLOR)satie» Updating dist/satie.d.ts...$(NO_COLOR)
LINT_STRING=$(INFO_COLOR)satie» Linting src/**.ts...$(NO_COLOR)
TEST_STRING=$(INFO_COLOR)satie» Testing __test__*.js ...$(NO_COLOR)
CLEAN_STRING=$(INFO_COLOR)satie» Deleting generated code ...$(NO_COLOR)
COVERAGE_STRING=$(INFO_COLOR)satie» Writing coverage info for __test__*.js to ./coverage ...$(NO_COLOR)
WARN_STRING=$(WARN_COLOR)[WARNINGS]$(NO_COLOR)

_tsc: _gentestsuite
	@printf "$(TSC_STRING)\n"
	@./node_modules/.bin/tsc || (make clean; exit 1)

_gentestsuite: clean
	@echo "// Generated by 'make _gentestsuite'" > ./src/tests.ts
	@find ./src | grep -e "__tests__.*\.ts\$$" | sed 's,\./src\/\(.*\)/\(.*\)\.ts,import "\./\1/\2";,' >> ./src/tests.ts

_stageOnly:
	@printf "$(STAGE_STRING)\n"

# Create satie.d.ts for TypeScript clients
	@./node_modules/.bin/dts-generator --name satie --out ./dist/satie.d.ts --main 'satie/index' --baseDir ./src ./src/index.ts > /dev/null
	@cd dist; find . | grep ".*\.d.ts" | grep -v satie.d.ts | xargs -I_FILE_ rm _FILE_

_watchStage:
	@printf "$(STAGE_STRING)\n"
# the completion message is sent before closing buffers!
	@make _stageOnly 2>&1 > /dev/null || (sleep 5; make _stageOnly)

_bundleOnly: _stageOnly _testOnly lint
	@printf "$(BUNDLE_PROD_STRING)\n"
	@./node_modules/.bin/webpack --config ./webpack.config.prod.js -p ./dist/index.js ./dist/satie-bundled-min.js

# ---- Other build modes ----------------------------------------------------------

watch: _gentestsuite
	@clear
	@printf "$(WATCH_STRING)\n"
	@CLEAN="1"; \
	INIT="0"; \
	./node_modules/.bin/tsc -w | \
	while read line; do \
	    if [[ $$line == *TS6042* ]]; then \
		if [[ "$$CLEAN" == "1" ]]; then \
		    printf "$(INFO_COLOR)» $$line$(NO_COLOR)\n"; \
		    (make _watchStage) & \
		    if [[ "$$INIT" == "0" ]]; then \
			if [[ "x$$RUN_TESTS" != "x" ]]; then \
			    ./node_modules/.bin/nodemon --quiet --exec "make _testOnly" -w ./dist/ -d 2 & \
			else \
			    printf "$(WARN_COLOR)» Tests are disabled. Run 'make watch RUN_TESTS=1' to run tests. $(NO_COLOR)\n"; \
			fi; \
			if [[ "x$$RUN_LINT" != "x" ]]; then \
			    ./node_modules/.bin/nodemon --quiet --exec "make lint" -w ./dist/ -d 2 &\
			else \
			    printf "$(WARN_COLOR)» Linting is disabled. Run 'make watch RUN_LINT=1' to run tests. $(NO_COLOR)\n"; \
			fi; \
			if [[ "x$$RUN_SATIEAPP" != "x" ]]; then \
			    sleep 5; \
			    cd ./webapp; \
			    make watch RUN_DEVSRV=1 & \
			    cd ..; \
			else \
			    printf "$(WARN_COLOR)» The Satie app is disabled. Run 'make watch RUN_SATIEAPP=1' to run the test server. $(NO_COLOR)\n"; \
			fi; \
			if [[ "x$$RUN_DEVSRV" != "x" ]]; then \
			    ./node_modules/.bin/webpack-dev-server \
				--debug \
				--devtool source-map \
				--output-pathinfo \
				--hot \
				--no-info \
				--progress \
				--watch \
				./dist/index.js \
				--host 0.0.0.0 \
				--port 8009 & \
			else \
			    printf "$(WARN_COLOR)» The dev server is disabled. Run 'make watch RUN_DEVSRV=1' to enable. $(NO_COLOR)\n"; \
			fi; \
			INIT="1"; \
		    fi; \
		else \
		    printf "$(ERROR_COLOR)» $$line$(NO_COLOR)\n"; \
		fi; \
	    elif [[ $$line == *TS6032* ]]; then \
		clear; \
		CLEAN="1"; \
		printf "$(INFO_COLOR)» $$line$(NO_COLOR)\n"; \
	    else \
		CLEAN="0"; \
		printf "$(ERROR_COLOR)» $$line$(NO_COLOR)\n"; \
	    fi; \
	done;

tsd: ./node_modules/tsd/build/cli.js
	./node_modules/tsd/build/cli.js link -so
	./node_modules/tsd/build/cli.js update -so

smufl:
	@bash -c "echo -ne \"$$BRAVURA_HEADER\"" > ./src/models/smufl/bravura.ts
	@cat ./vendor/bravura/bravura_metadata.json | jq '{fontName: .fontName, fontVersion: .fontVersion, engravingDefaults: .engravingDefaults, glyphBBoxes: [(.glyphBBoxes | to_entries[] | .value.bBoxNE + .value.bBoxSW + [.key])], glyphsWithAnchors: .glyphsWithAnchors, ligatures: .ligatures}' >> ./src/models/smufl/bravura.ts
	@echo "; export default Bravura;" >> ./src/models/smufl/bravura.ts
	
	@bash -c "echo -ne \"$$GLYPHNAMES_HEADER\"" > ./src/models/smufl/glyphnames.ts
	@cat ./vendor/smufl/glyphnames.json | jq '[to_entries[] | {key: .key, value: .value.codepoint}] | from_entries' >> ./src/models/smufl/glyphnames.ts
	@echo "; export default names;" >> ./src/models/smufl/glyphnames.ts
	@printf "$(INFO_COLOR)» SMuFL built successfully.$(NO_COLOR)\n"; \

TS_FILES = $(shell find src/ -type f -name '*.ts')

lint: node_modules/.bin/tslint
	@printf "$(LINT_STRING)\n"
	@set -o pipefail; ./node_modules/.bin/tslint $(TS_FILES) | sed -e "s/\(.*\)/[tslint] \x1b[31;01m\1\x1b[0m/"

vendor/tslint/bin/tslint.js:
	@git submodule update --init --recursive
	@cd ./vendor/tslint/; NODE_ENV=dev npm install
	@cd ./vendor/tslint/; grunt

test: build _testOnly lint

_testOnly:
	@printf "$(TEST_STRING)\n"
	@if [ "x$$TEST" == "x" ]; then find ./dist -type f | grep "__tests__.*js\$$" | xargs ./node_modules/mocha/bin/mocha -t 3000; else find ./dist -type f | grep "__tests__.*js\$$" | xargs ./node_modules/mocha/bin/mocha -t 3000 --grep "$$TEST" 2>&1; fi

test_all: test lint

coverage: build
	@printf "$(COVERAGE_STRING)\n"
	@find ./dist -type f | grep "__tests__.*js\$$" | xargs istanbul cover node_modules/mocha/bin/_mocha -- -R list

./webapp/node_modules:
	cd ./webapp; npm install

clean:
	@printf "$(CLEAN_STRING)\n"
	@rm -rf ./dist
